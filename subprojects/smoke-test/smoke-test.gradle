apply plugin: 'groovy'

useTestFixtures()

sourceSets {
    smokeTest {
        compileClasspath += main.output + test.output
        runtimeClasspath += compileClasspath
    }
}

configurations {
    smokeTestCompile.extendsFrom testCompile
    smokeTestRuntime.extendsFrom testRuntime
}

dependencies {
    smokeTestCompile project(':testKit')
    smokeTestCompile libraries.spock
}

tasks.create('smokeTest', Test) { Test task ->
    dependsOn ':intTestImage' // for the Gradle user dir/Gradle Home dir
    mustRunAfter 'test'

    testClassesDir = sourceSets.smokeTest.output.classesDir
    classpath = sourceSets.smokeTest.runtimeClasspath
    jvmArgs '-Xmx512m', '-XX:+HeapDumpOnOutOfMemoryError'
    if(!javaVersion.java8Compatible) {
        jvmArgs '-XX:MaxPermSize=768m'
    }

    reports.junitXml.destination = file("${project.testResultsDir}/$name")
    reports.html.destination = file("${project.reporting.baseDir}/$name")
    systemProperties['smokeTest.gradleHomeDir'] = rootProject.intTestImage.destinationDir.absolutePath
    systemProperties['smokeTest.gradleUserHomeDir'] = rootProject.file('intTestHomeDir').absolutePath
}

plugins.withType(org.gradle.plugins.ide.idea.IdeaPlugin) { // lazy as plugin not applied yet
    idea {
        module {
            sourceSets.smokeTest.allSource.srcDirs.each {
                testSourceDirs += it
            }
            scopes.TEST.plus.add(configurations.smokeTestCompile)
            scopes.TEST.plus.add(configurations.smokeTestRuntime)
        }
    }
}

plugins.withType(org.gradle.plugins.ide.eclipse.EclipsePlugin) { // lazy as plugin not applied yet
    eclipse {
        classpath {
            plusConfigurations.add(configurations.smokeTestCompile)
            plusConfigurations.add(configurations.smokeTestRuntime)
        }
    }
}
